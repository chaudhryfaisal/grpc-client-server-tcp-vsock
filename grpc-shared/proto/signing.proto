syntax = "proto3";

package signing;

// The signing service definition
service SigningService {
  // Signs data using the specified key and algorithm
  rpc Sign(SignRequest) returns (SignResponse);
  
  // Generates a new key pair
  rpc GenerateKey(GenerateKeyRequest) returns (GenerateKeyResponse);
  
  // Lists available keys
  rpc ListKeys(ListKeysRequest) returns (ListKeysResponse);
  
  // Deletes a key
  rpc DeleteKey(DeleteKeyRequest) returns (DeleteKeyResponse);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Verifies a signature
  rpc Verify(VerifyRequest) returns (VerifyResponse);
}

// Key types supported
enum KeyType {
  KEY_TYPE_UNSPECIFIED = 0;
  KEY_TYPE_RSA_2048 = 1;
  KEY_TYPE_RSA_3072 = 2;
  KEY_TYPE_RSA_4096 = 3;
  KEY_TYPE_ECC_P256 = 4;
  KEY_TYPE_ECC_P384 = 5;
  KEY_TYPE_ECC_P521 = 6;
}

// Signing algorithms supported
enum SigningAlgorithm {
  SIGNING_ALGORITHM_UNSPECIFIED = 0;
  SIGNING_ALGORITHM_RSA_PSS_SHA256 = 1;
  SIGNING_ALGORITHM_RSA_PSS_SHA384 = 2;
  SIGNING_ALGORITHM_RSA_PSS_SHA512 = 3;
  SIGNING_ALGORITHM_RSA_PKCS1_SHA256 = 4;
  SIGNING_ALGORITHM_RSA_PKCS1_SHA384 = 5;
  SIGNING_ALGORITHM_RSA_PKCS1_SHA512 = 6;
  SIGNING_ALGORITHM_ECDSA_SHA256 = 7;
  SIGNING_ALGORITHM_ECDSA_SHA384 = 8;
  SIGNING_ALGORITHM_ECDSA_SHA512 = 9;
}

// Hash algorithms supported
enum HashAlgorithm {
  HASH_ALGORITHM_UNSPECIFIED = 0;
  HASH_ALGORITHM_SHA256 = 1;
  HASH_ALGORITHM_SHA384 = 2;
  HASH_ALGORITHM_SHA512 = 3;
}

// Error codes for better error handling
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_INVALID_KEY_ID = 1;
  ERROR_CODE_INVALID_ALGORITHM = 2;
  ERROR_CODE_INVALID_DATA = 3;
  ERROR_CODE_KEY_GENERATION_FAILED = 4;
  ERROR_CODE_SIGNING_FAILED = 5;
  ERROR_CODE_VERIFICATION_FAILED = 6;
  ERROR_CODE_KEY_NOT_FOUND = 7;
  ERROR_CODE_KEY_ALREADY_EXISTS = 8;
  ERROR_CODE_INTERNAL_ERROR = 9;
  ERROR_CODE_INVALID_SIGNATURE = 10;
}

// Key information
message KeyInfo {
  string key_id = 1;
  KeyType key_type = 2;
  int64 created_at = 3; // Unix timestamp
  string description = 4;
  bool is_active = 5;
}

// The request message containing the data to be signed
message SignRequest {
  bytes data = 1;
  KeyType key_type = 2;
  SigningAlgorithm algorithm = 3;
  string key_id = 4;
}

// The response message containing the signature
message SignResponse {
  bytes signature = 1;
  bool success = 2;
  string error_message = 3;
  ErrorCode error_code = 4;
  uint64 processing_time_us = 5;
}

// Request to generate a new key pair
message GenerateKeyRequest {
  string key_id = 1;
  KeyType key_type = 2;
  string description = 3;
}

// Response for key generation
message GenerateKeyResponse {
  bool success = 1;
  string error_message = 2;
  ErrorCode error_code = 3;
  KeyInfo key_info = 4;
}

// Request to list available keys
message ListKeysRequest {
  // Optional filter by key type
  optional KeyType key_type_filter = 1;
  // Optional filter by active status
  optional bool active_only = 2;
}

// Response containing list of keys
message ListKeysResponse {
  repeated KeyInfo keys = 1;
  bool success = 2;
  string error_message = 3;
  ErrorCode error_code = 4;
}

// Request to delete a key
message DeleteKeyRequest {
  string key_id = 1;
}

// Response for key deletion
message DeleteKeyResponse {
  bool success = 1;
  string error_message = 2;
  ErrorCode error_code = 3;
}

// Health check request
message HealthCheckRequest {
  string service = 1; // Optional service name to check
}

// Health check response
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  ServingStatus status = 1;
  string message = 2;
}

// Request to verify a signature
message VerifyRequest {
  bytes data = 1;
  bytes signature = 2;
  string key_id = 3;
  SigningAlgorithm algorithm = 4;
  HashAlgorithm hash_algorithm = 5;
}

// Response for signature verification
message VerifyResponse {
  bool valid = 1;
  bool success = 2;
  string error_message = 3;
  ErrorCode error_code = 4;
}
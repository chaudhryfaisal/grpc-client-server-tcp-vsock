syntax = "proto3";

package crypto;

// Crypto service for RSA and ECC signing operations
service CryptoService {
    // Sign data using RSA or ECC keys
    rpc Sign(SignRequest) returns (SignResponse);
    
    // Get public key information
    rpc GetPublicKey(PublicKeyRequest) returns (PublicKeyResponse);
}

// Supported key types
enum KeyType {
    RSA = 0;
    ECC = 1;
}

// Supported signing algorithms
enum SigningAlgorithm {
    RSA_PKCS1_SHA256 = 0;
    RSA_PSS_SHA256 = 1;
    ECDSA_P256_SHA256 = 2;
    ECDSA_P384_SHA256 = 3;
}

// Request message for signing operation
message SignRequest {
    // Data to be signed
    bytes data = 1;
    // Key type to use for signing
    KeyType key_type = 2;
    // Signing algorithm to use
    SigningAlgorithm algorithm = 3;
    // Client timestamp when request was sent
    int64 timestamp = 4;
}

// Response message from signing operation
message SignResponse {
    // Digital signature of the data
    bytes signature = 1;
    // Key type used for signing
    KeyType key_type = 2;
    // Algorithm used for signing
    SigningAlgorithm algorithm = 3;
    // Original request timestamp
    int64 request_timestamp = 4;
    // Server timestamp when response was generated
    int64 response_timestamp = 5;
}

// Request message for public key retrieval
message PublicKeyRequest {
    // Key type to retrieve
    KeyType key_type = 1;
    // Client timestamp when request was sent
    int64 timestamp = 2;
}

// Response message with public key information
message PublicKeyResponse {
    // Public key in DER format
    bytes public_key_der = 1;
    // Key type
    KeyType key_type = 2;
    // Original request timestamp
    int64 request_timestamp = 3;
    // Server timestamp when response was generated
    int64 response_timestamp = 4;
}